\"\"\"\nMonitoring Dashboard for SkyGuard Storm Prediction System\n\"\"\"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime, timedelta\nimport json\nimport os\nimport logging\n\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass SkyGuardMonitor:\n    \"\"\"Monitor the SkyGuard system performance and predictions\"\"\"\n    \n    def __init__(self, data_dir=\"data/predictions\"):\n        self.data_dir = data_dir\n        self.predictions = []\n        self.load_prediction_history()\n    \n    def load_prediction_history(self):\n        \"\"\"Load historical predictions from files\"\"\"\n        if not os.path.exists(self.data_dir):\n            logger.warning(f\"Data directory {self.data_dir} does not exist\")\n            return\n        \n        # Load all JSON prediction files\n        for filename in os.listdir(self.data_dir):\n            if filename.endswith(\".json\"):\n                try:\n                    with open(os.path.join(self.data_dir, filename), 'r') as f:\n                        prediction = json.load(f)\n                        self.predictions.append(prediction)\n                except Exception as e:\n                    logger.error(f\"Error loading prediction file {filename}: {e}\")\n        \n        logger.info(f\"Loaded {len(self.predictions)} historical predictions\")\n    \n    def generate_performance_report(self):\n        \"\"\"Generate a performance report\"\"\"\n        if not self.predictions:\n            logger.warning(\"No predictions to analyze\")\n            return\n        \n        # Convert predictions to DataFrame\n        df = pd.DataFrame(self.predictions)\n        df['timestamp'] = pd.to_datetime(df['timestamp'])\n        df['prediction'] = df['prediction'].astype(int)\n        df['probability_storm'] = df['probability_storm'].astype(float)\n        df['confidence'] = df['confidence'].astype(float)\n        \n        # Basic statistics\n        total_predictions = len(df)\n        storm_predictions = df['prediction'].sum()\n        storm_percentage = (storm_predictions / total_predictions) * 100\n        \n        avg_confidence = df['confidence'].mean()\n        avg_storm_probability = df['probability_storm'].mean()\n        \n        print(\"=== SkyGuard System Performance Report ===\")\n        print(f\"Total Predictions: {total_predictions}\")\n        print(f\"Storm Predictions: {storm_predictions} ({storm_percentage:.1f}%)\")\n        print(f\"Average Confidence: {avg_confidence*100:.2f}%\")\n        print(f\"Average Storm Probability: {avg_storm_probability*100:.2f}%\")\n        print(f\"Data Range: {df['timestamp'].min()} to {df['timestamp'].max()}\")\n        \n        # Time series plot\n        self.plot_prediction_trend(df)\n        \n        # Confidence distribution\n        self.plot_confidence_distribution(df)\n        \n        # Storm probability distribution\n        self.plot_probability_distribution(df)\n    \n    def plot_prediction_trend(self, df):\n        \"\"\"Plot prediction trends over time\"\"\"\n        plt.figure(figsize=(12, 8))\n        \n        # Plot 1: Predictions over time\n        plt.subplot(2, 2, 1)\n        plt.plot(df['timestamp'], df['prediction'], 'o-', alpha=0.7)\n        plt.title('Storm Predictions Over Time')\n        plt.ylabel('Prediction (0=No Storm, 1=Storm)')\n        plt.xticks(rotation=45)\n        plt.grid(True, alpha=0.3)\n        \n        # Plot 2: Storm probability over time\n        plt.subplot(2, 2, 2)\n        plt.plot(df['timestamp'], df['probability_storm'], 'o-', color='red', alpha=0.7)\n        plt.title('Storm Probability Over Time')\n        plt.ylabel('Probability')\n        plt.ylim(0, 1)\n        plt.xticks(rotation=45)\n        plt.grid(True, alpha=0.3)\n        \n        # Plot 3: Confidence over time\n        plt.subplot(2, 2, 3)\n        plt.plot(df['timestamp'], df['confidence'], 'o-', color='green', alpha=0.7)\n        plt.title('Prediction Confidence Over Time')\n        plt.ylabel('Confidence')\n        plt.ylim(0, 1)\n        plt.xticks(rotation=45)\n        plt.grid(True, alpha=0.3)\n        \n        # Plot 4: Histogram of predictions\n        plt.subplot(2, 2, 4)\n        df['prediction'].hist(bins=2, alpha=0.7, color=['blue', 'red'])\n        plt.title('Prediction Distribution')\n        plt.xlabel('Prediction (0=No Storm, 1=Storm)')\n        plt.ylabel('Frequency')\n        plt.xticks([0, 1])\n        plt.grid(True, alpha=0.3)\n        \n        plt.tight_layout()\n        plt.savefig('outputs/monitoring_dashboard.png', dpi=300, bbox_inches='tight')\n        plt.show()\n        \n        print(\"Dashboard saved to outputs/monitoring_dashboard.png\")\n    \n    def plot_confidence_distribution(self, df):\n        \"\"\"Plot confidence distribution\"\"\"\n        plt.figure(figsize=(10, 6))\n        plt.hist(df['confidence'], bins=20, alpha=0.7, color='green')\n        plt.title('Distribution of Prediction Confidence')\n        plt.xlabel('Confidence')\n        plt.ylabel('Frequency')\n        plt.grid(True, alpha=0.3)\n        plt.savefig('outputs/confidence_distribution.png', dpi=300, bbox_inches='tight')\n        plt.show()\n    \n    def plot_probability_distribution(self, df):\n        \"\"\"Plot storm probability distribution\"\"\"\n        plt.figure(figsize=(10, 6))\n        plt.hist(df['probability_storm'], bins=20, alpha=0.7, color='red')\n        plt.title('Distribution of Storm Probabilities')\n        plt.xlabel('Storm Probability')\n        plt.ylabel('Frequency')\n        plt.grid(True, alpha=0.3)\n        plt.savefig('outputs/probability_distribution.png', dpi=300, bbox_inches='tight')\n        plt.show()\n    \n    def check_model_drift(self):\n        \"\"\"Check for potential model drift\"\"\"\n        if len(self.predictions) < 10:\n            logger.warning(\"Not enough predictions to check for drift\")\n            return\n        \n        # Convert to DataFrame\n        df = pd.DataFrame(self.predictions)\n        df['timestamp'] = pd.to_datetime(df['timestamp'])\n        \n        # Sort by timestamp\n        df = df.sort_values('timestamp')\n        \n        # Take last 10 predictions and first 10 predictions\n        recent_predictions = df.tail(10)\n        old_predictions = df.head(10)\n        \n        # Compare average probabilities\n        recent_avg = recent_predictions['probability_storm'].mean()\n        old_avg = old_predictions['probability_storm'].mean()\n        \n        print(\"\\n=== Model Drift Analysis ===\")\n        print(f\"Average storm probability (recent 10): {recent_avg*100:.2f}%\")\n        print(f\"Average storm probability (oldest 10): {old_avg*100:.2f}%\")\n        print(f\"Difference: {(recent_avg - old_avg)*100:.2f}%\")\n        \n        # If there's a significant difference, it might indicate drift\n        if abs(recent_avg - old_avg) > 0.2:  # 20% difference\n            print(\"⚠️  WARNING: Potential model drift detected!\")\n            print(\"   Consider retraining the model with recent data.\")\n        else:\n            print(\"✅ Model appears stable (no significant drift detected)\")\n\ndef main():\n    \"\"\"Main function to run the monitoring dashboard\"\"\"\n    print(\"=== SkyGuard Monitoring Dashboard ===\")\n    \n    # Initialize monitor\n    monitor = SkyGuardMonitor()\n    \n    # Generate performance report\n    monitor.generate_performance_report()\n    \n    # Check for model drift\n    monitor.check_model_drift()\n    \n    print(\"\\nMonitoring dashboard complete!\")\n\nif __name__ == \"__main__\":\n    main()\n